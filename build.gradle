plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'io.yangbob'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation("com.github.f4b6a3:ulid-creator:5.2.0")
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

tasks.register("copyRestDocs", Copy.class) {
    dependsOn asciidoctor

    from "${asciidoctor.outputDir}"
    into "src/main/resources/static/docs"
}

bootJar {
    dependsOn copyRestDocs
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.jacocoTestReport {
    def excludes = []
    // Q클래스 파일들 제외
    for (qPattern in "**/QA".."**/QZ") {
        excludes.add(qPattern + "*")
    }

    classDirectories.setFrom(
            files(
                    classDirectories.files.collect {
                        fileTree(dir: it, exclude: ["**/OrderApplication*"] + excludes)
                    }
            )
    )

    dependsOn(test)
}
